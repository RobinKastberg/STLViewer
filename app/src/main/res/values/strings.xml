<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Halloween</string>
    <string name="fragment_shader">precision mediump float;
uniform vec3 uLightPos;
varying vec3 fNormal;
varying vec3 fPosition;
void main()
{
    float distance = length(uLightPos - fPosition);
    vec3 lightVector = normalize(uLightPos - fPosition);
    float diffuse = (dot(vec3(fNormal), lightVector)+2.0)/2.0;
    gl_FragColor = diffuse * vec4(1.0,1.0,1.0,1.0);
    gl_FragColor[3] = 1.0;
}</string>
    <string name="vertex_shader">attribute vec4 vPosition;
attribute vec4 vNormal;

uniform mat4 uMVPMatrix;
uniform mat4 uMVMatrix;

varying vec3 fNormal;
varying vec3 fPosition;
void main() {
    fPosition = vec3(uMVMatrix * vPosition);
    fNormal = normalize(vec3(uMVMatrix * vNormal));
    gl_Position = uMVPMatrix * vPosition;
}</string>
        <string name="stone_fragment_shader">precision highp float;
uniform vec3 uLightPos;
uniform mat4 uMVMatrix;

varying vec3 fPosition;
void main()
{

    float v = atan(fPosition.y, fPosition.x);
    float u = asin(fPosition.x/cos(v));
    vec3 r_u = vec3(cos(u)*cos(v), cos(u)*sin(v), (-sin(u)-3.0*cos(u)*cos(u)*sin(u))/4.0);
    vec3 r_v = vec3(-sin(u)*sin(v), sin(u)*cos(v), 0.0);
    vec3 fNormal = normalize(cross(r_u, r_v));
    fNormal = normalize(mat3(uMVMatrix) * vec3(fNormal));
    float distance = length(uLightPos - fPosition);
    vec3 lightVector = normalize(uLightPos - fPosition);
    float diffuse = clamp(dot(fNormal, lightVector),0.0,1.0);
    gl_FragColor = (diffuse + 0.6)* vec4(1.0,1.0,1.0,1.0);
    gl_FragColor[3] = 1.0;
}</string>
        <string name="stone_vertex_shader">attribute vec4 vPosition;
attribute vec4 vNormal;

uniform mat4 uMVPMatrix;

varying vec3 fPosition;
void main() {
    fPosition = vec3(vPosition);
    gl_Position = uMVPMatrix * (vPosition+vNormal*0.000000000000000000001);
}</string>

        <string name="goban_fragment_shader">precision mediump float;
uniform vec3 uLightPos;
varying highp vec3 fNormal;
varying vec3 fPos;


const float PI =  3.1415926535897932384626433832795;
const vec3 dark = vec3(222.0,184.0,135.0)/255.0;
const vec3 light = vec3(255.0,211.0,155.0)/255.0;
vec4 wood(vec3 co){
    co.y /= 10.0;
    co -= vec3(0.3, 0.7, 0.1);

    float mixer = 0.5*sin(1000.0*length(co.xy)+200.0*sin(co.z+0.5*co.x+0.1*co.y));
    return vec4(mix(light,dark,0.5+mixer),1.0);
}
void main()
{
    vec3 N = fNormal;
    vec3 L = normalize(vec3(0.0, 1.0, 0.0));
    vec3 E = normalize(fPos-uLightPos);
    vec3 H = normalize(L + E);
    float df = max(0.0, dot(N, L));
    float sf = max(0.0, dot(N, H));
    sf = 0.1*pow(sf, 100.0);
    float gridx = mod(10.0*(fPos.x+0.05),1.0);
    gridx = smoothstep(0.45,0.5,min(gridx, 1.0-gridx));
    gridx *= step(1.0,fPos.y);
    gridx *= step(-0.90,fPos.x)*(1.0-step(0.90,fPos.x));
    gridx *= step(-0.90,fPos.z)*(1.0-step(0.90,fPos.z));

    float gridy = mod(10.0*(fPos.z+0.05),1.0);
    gridy = smoothstep(0.45,0.5,min(gridy, 1.0-gridy));
    gridy *= step(1.0,fPos.y);
    gridy *= step(-0.90,fPos.x)*(1.0-step(0.90,fPos.x));
    gridy *= step(-0.90,fPos.z)*(1.0-step(0.90,fPos.z));

    float diffuse =  clamp(dot(normalize(vec3(0.0, 1.0, 1.0)), fNormal),0.0,1.0);
    gl_FragColor = (1.0-gridx) * (1.0 - gridy) * (diffuse + 0.3) * wood(fPos);
    gl_FragColor += sf * vec4(255.0, 241.0, 224.0, 1.0)/256.0;
    gl_FragColor[3] = 1.0;
}
</string>
    <string name="goban_vertex_shader">
attribute vec4 vPosition;
attribute vec4 vNormal;

uniform mat4 uMVPMatrix;
uniform mat4 uMVMatrix;

varying vec3 fNormal;
varying vec3 fPos;
void main() {
    fPos = vec3(vPosition);
    fNormal = normalize(mat3(uMVMatrix) * vec3(vNormal));
    vec4 tPosition = vPosition;
    tPosition.y *= 0.1;
    gl_Position = uMVPMatrix * tPosition;
}
</string>
    <string name="settings">Settings</string>

</resources>
